def component = [
    'autoscale-api': true
]

pipeline {
    agent any
    environment {
        // 환경변수 설정
        DOCKER_USER_ID = 'junwon1131'
        DOCKER_HUB_CREDENTIALS_ID = 'Docker-hub'
        GITHUB_CREDENTIALS_ID = 'Github-access-token'
        GITLAB_CREDENTIALS_ID = 'GitLab-access-token-username'
        REPO = 's10-final/S10P31S208'
        GIT_REPO = 'https://github.com/junwon9824/businesscard_submodule.git'
        ORG_GRADLE_JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
    }

    stages {
        stage('Docker 로그인') {
            steps {
                // Docker Hub 크리덴셜을 사용하여 Docker에 로그인
                withCredentials([usernamePassword(credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Pull') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value && entry.key != 'redis') {
                            def var = entry.key
                            sh "docker-compose -f docker-compose.yml -p develop-server pull ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }

        stage('Build Images') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value && entry.key != 'redis') {
                            def var = entry.key
                            sh "docker-compose -f docker-compose.yml -p develop-server build ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }

        stage('Tag and Push Images') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value && entry.key != 'redis') {
                            def var = entry.key
                            // 빌드된 이미지의 이름을 설정합니다.
                            def imageName = "develop-server_${var.toLowerCase()}"
                            // 이미지가 있는지 확인합니다.
                            if (sh(script: "docker images | grep ${imageName}", returnStatus: true) == 0) {
                                // 이미지가 존재하면 태그하고 푸시합니다.
                                sh "docker tag ${imageName} $DOCKER_USER_ID/${var.toLowerCase()}:latest"
                                sh "docker push $DOCKER_USER_ID/${var.toLowerCase()}:latest"
                            } else {
                                // 이미지가 없는 경우 에러를 출력합니다.
                                error "Error: Image ${imageName} not found."
                            }
                        }
                    }
                }
            }
        }
    }
}
