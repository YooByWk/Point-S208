def component = [
    'ocr': true,
    'mysql':false,
    'backend-cud':false,
    'backend-read':false,
    'prometheus':false,
    'grafana':false,
    'alertmanager':false,
    
]

// 파일 복사 작업을 수행하는 함수 정의
def fileCopy() {
    // 파일 복사 작업 수행
//     sh 'cp /var/jenkins_home/workspace/ocr/submodule/application.yml /var/jenkins_home/workspace/backend-read/OCR/src'

}

pipeline {
    agent any
    environment {
        // 환경변수 설정
        // NGINX_TAG = 'latest'
        // FRONT_TAG = 'latest'
        // BACK_TAG = 'latest'
        // REDIS_TAG = 'alpine'
        DOCKER_USER_ID = 'junwon1131'
        // Docker Hub 및 GitHub 크리덴셜 ID
        DOCKER_HUB_CREDENTIALS_ID = 'Docker-hub'
        GITHUB_CREDENTIALS_ID = 'Github-access-token'
        GITLAB_CREDENTIALS_ID = 'GitLab-access-token-username' // GitLab 크리덴셜 ID 추가
        REPO = 's10-final/S10P31S208'

        GIT_REPO = 'https://github.com/junwon9824/businesscard_submodule.git'

        // Gradle 환경 변수 설정
        ORG_GRADLE_JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
    }

    stages {

        stage('Checkout') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -al'

                    dir('submodule')
                    {
                        // GitHub access token을 사용하여 submodule을 가져옴
                        checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], userRemoteConfigs: [[credentialsId: 'Github-access-token', url: GIT_REPO]]])
                        //                         sh 'git pull origin main'
                        sh 'echo "This is a test submodule script"'
                        //                         sh 'rm .env'
                        sh 'cat  secrets.json'
                        sh 'pwd'
                        sh 'ls -al'
                    }

                    sh 'pwd'
                    sh 'ls -al'
                }
            }
        }

        stage('Copy Files') {
                    steps {
                        script {
                            // 파일 복사 디버깅 메시지
                            echo 'Copying secret files from submodule to src/main/resources...'

                            // 파일 복사 작업 수행
                            fileCopy()

                            // 파일 복사 완료 디버깅 메시지
                            echo 'Copying completed.'
                        }
                    }
        }

        stage('Build') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -al'

                    // docker-compose가 설치되어 있는지 확인하고, 없으면 설치
                    sh '''
                    if ! command -v docker-compose &> /dev/null
                    then
                        echo "docker-compose not found, installing..."
                        mkdir -p /var/jenkins_home/bin
                        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /var/jenkins_home/bin/docker-compose
                        chmod +x /var/jenkins_home/bin/docker-compose
                        export PATH=$PATH:/var/jenkins_home/bin
                    else
                        echo "docker-compose is already installed."
                    fi
                    '''
                    sh 'pwd'
                    sh 'ls -al'

                   component.each { entry ->
                if (entry.value) {
                    def component_name = entry.key
                    // 지정된 컴포넌트만 빌드
                    sh "/var/jenkins_home/bin/docker-compose -f docker-compose.yml build ${component_name}"
                }
            }
            
                    fileCopy()

                }
            }
        }

        stage('Docker Login') {
            steps {
                // Docker Hub 크리덴셜을 사용하여 Docker에 로그인
                withCredentials([usernamePassword(credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Tag and Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'pwd'
                    sh 'ls -al'
//                     dir('OCR')///////////
//                     {
//                         echo 'innn ocrrrrrrr'
//                         sh 'pwd'
//                         sh 'ls -al'
//                     //                         sh 'cat '
//                     }
//                     dir('OCR/src')///////////
//                     {
//                         sh 'pwd'
//                         sh 'ls -al'
//                         sh 'cat main.py'
//                         //
//                         // sh 'python3 main.py'
//
//                         // sh 'python main.py'
//                     }
                    sh 'ls -al'
                    // 특정 서비스만 푸시
                    sh 'docker-compose -f docker-compose.yml push ocr'
                }
            }
        }

        stage('Prune old images') {
            steps {
                script {
                    sh 'docker image prune --filter until=1h --force'
                }
            }
        }

        stage('Pull') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value && entry.key != 'redis') {
                            def var = entry.key
                            sh "docker-compose -f docker-compose.yml -p develop-server pull ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }

        stage('Stop and Remove ocr  Service') {
                steps {
                    script {
                        sh 'docker-compose -f docker-compose.yml -p develop-server stop ocr'
                        sh 'docker-compose -f docker-compose.yml -p develop-server rm -f ocr'
                    }
                }
        }

        stage('Up') {
            steps {
                script {
                    component.each { entry ->
                          if (entry.value && entry.key != 'mysql')  {
                            def var = entry.key
                            try {
                                sh "docker-compose -f docker-compose.yml -p develop-server up -d ${var.toLowerCase()}"
                            } catch (Exception e) {
                                // 'docker compose up -d' 명령이 실패한 경우
                                echo "Failed to up. Starting 'docker compose start'..."
                                sh "docker-compose -f docker-compose.yml -p develop-server restart ${var.toLowerCase()}"
                            }
                        }
                    }
                    sh 'pwd'
                    sh 'ls -al'

//                      dir('OCR')///////////
//                     {
//                         echo 'innn ocrrrrrrr'
//                         sh 'pwd'
//                         sh 'ls -al'
//                     //                         sh 'cat '
//                     }


                }
            }
        }
    }
//
//     post {
//         always {
//             script {
//                 def Author_ID = sh(script: 'git show -s --pretty=%an', returnStdout: true).trim()
//                 def Author_Name = sh(script: 'git show -s --pretty=%ae', returnStdout: true).trim()
//                 mattermostSend(color: 'good',
//                     message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
//                     endpoint: 'https://meeting.ssafy.com/hooks/pbwfpcrqgff1zr8fmjzq7iukfr',
//                     channel: 'C102-jenkins'
//             )
//             }
//         }
//     }

}
