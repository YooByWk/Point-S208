version: '3.8'

services:

  mysql:
    image: mysql:latest
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ssafy
      MYSQL_DATABASE: bscard
      MYSQL_USER: root
      MYSQL_PASSWORD: ssafy
    ports:
      - "3306:3306"

  jenkins:
    user: root
    image: junwon1131/jenkins:lts
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    ports:
      - "8081:8080"  # Jenkins 웹 인터페이스 포트
      - "50000:50000"  # Jenkins 에이전트 연결 포트
    volumes:
      - jenkins_home:/var/jenkins_home  # Jenkins 데이터를 저장할 볼륨
      - /var/run/docker.sock:/var/run/docker.sock


  ocr:
    container_name: ocr
    image: junwon1131/s208-ocr:latest
    build:
      context: ./OCR
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - jenkins-network
    volumes:
      - /var/jenkins_home/workspace/back-ocr/submodule/secrets.json:/app/secrets.json



  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  prometheus:
    image: prom/prometheus:v2.20.1
    volumes:
      - /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"


#  alertmanager:
#    image: prom/alertmanager:v0.22.2
#    ports:
#      - "9093:9093"
#    volumes:
#      - ./alertmanager:/etc/alertmanager
#    command:
#      - '--config.file=/etc/alertmanager/alertmanager.yml'
#
#  nginx:
#    image: junwon1131/s208-nginx:latest
#    container_name: nginx-https
#    build:
#      context: ./backend/nginx
#      dockerfile: Dockerfile
#
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      #      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#      #      - host머신 인증서를 컨테이너 내부로 볼륨매핑.
##      - /etc/letsencrypt/live/j10s208.p.ssafy.io/fullchain.pem:/etc/ssl/openssl.cnf
##      - /etc/letsencrypt/live/j10s208.p.ssafy.io/privkey.pem:/etc/ssl/private.key
#
#    restart: unless-stopped
#    depends_on:
#      - back
#    networks:
#      - jenkins-network





  #  front:
#    container_name: front
#    image: junwon1131/s208-front:latest
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    restart: unless-stopped
#    ports:
#      - "5173:5173"
#    networks:
#      - jenkins-network
#    depends_on:
#      - back

  backend-cud:
    container_name: backend-cud
    image: junwon1131/s208-backend-cud:latest
    build:
      context: ./backend-cud
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - jenkins-network
#    depends_on:
#      - redis

networks:
  jenkins-network:
    external: true


volumes:
  jenkins_home:
  prometheus_data:
  grafana_data:
  secrets:
